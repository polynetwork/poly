package polygon

import (
	"encoding/hex"
	"encoding/json"
	"testing"

	"github.com/ontio/ontology-crypto/keypair"
	"github.com/polynetwork/poly/account"
	"github.com/polynetwork/poly/common"
	vconfig "github.com/polynetwork/poly/consensus/vbft/config"
	"github.com/polynetwork/poly/core/genesis"
	"github.com/polynetwork/poly/core/states"
	"github.com/polynetwork/poly/core/store/leveldbstore"
	"github.com/polynetwork/poly/core/store/overlaydb"
	"github.com/polynetwork/poly/core/types"
	"github.com/polynetwork/poly/native"
	"github.com/polynetwork/poly/native/service/governance/node_manager"
	"github.com/polynetwork/poly/native/service/governance/side_chain_manager"
	scom "github.com/polynetwork/poly/native/service/header_sync/common"
	"github.com/polynetwork/poly/native/service/utils"
	"github.com/polynetwork/poly/native/storage"
	"gotest.tools/assert"
)

var (
	acct     = account.NewAccount("")
	setBKers = func() {
		genesis.GenesisBookkeepers = []keypair.PublicKey{acct.PublicKey}
	}
	heimdalChainID = uint64(2)
	borChainID     = uint64(3)
)

func init() {
	setBKers()
}

func NewNative(args []byte, tx *types.Transaction, db *storage.CacheDB) (service *native.NativeService, err error) {
	if db == nil {
		store, _ := leveldbstore.NewMemLevelDBStore()
		db = storage.NewCacheDB(overlaydb.NewOverlayDB(store))
		sink := common.NewZeroCopySink(nil)
		view := &node_manager.GovernanceView{
			TxHash: common.UINT256_EMPTY,
			Height: 0,
			View:   0,
		}
		view.Serialization(sink)
		db.Put(utils.ConcatKey(utils.NodeManagerContractAddress, []byte(node_manager.GOVERNANCE_VIEW)), states.GenRawStorageItem(sink.Bytes()))

		peerPoolMap := &node_manager.PeerPoolMap{
			PeerPoolMap: map[string]*node_manager.PeerPoolItem{
				vconfig.PubkeyID(acct.PublicKey): {
					Address:    acct.Address,
					Status:     node_manager.ConsensusStatus,
					PeerPubkey: vconfig.PubkeyID(acct.PublicKey),
					Index:      0,
				},
			},
		}
		sink.Reset()
		peerPoolMap.Serialization(sink)
		db.Put(utils.ConcatKey(utils.NodeManagerContractAddress,
			[]byte(node_manager.PEER_POOL), utils.GetUint32Bytes(0)), states.GenRawStorageItem(sink.Bytes()))

	}
	service, err = native.NewNativeService(db, tx, 0, 0, common.Uint256{0}, 0, args, false)
	if err != nil {
		return
	}
	if db == nil {
		err = side_chain_manager.PutSideChain(service, &side_chain_manager.SideChain{
			ChainId: heimdalChainID,
		})
		if err != nil {
			return
		}
		extraInfo := ExtraInfo{
			Sprint:           64,
			Period:           2,
			ProducerDelay:    6,
			BackupMultiplier: 2,
			HeimdallChainID:  80001,
		}
		extraInfoBytes, _ := json.Marshal(extraInfo)
		err = side_chain_manager.PutSideChain(service, &side_chain_manager.SideChain{
			ChainId:   borChainID,
			ExtraInfo: extraInfoBytes,
		})
		if err != nil {
			return
		}
	}
	return
}

func TestPolygon(t *testing.T) {

	var (
		native *native.NativeService
		err    error
	)

	handler := NewHeimdallHandler()

	{
		// block 1000
		heimdallGenesisHeaderBytes, _ := hex.DecodeString("0ab0020a02080a120c6865696d64616c6c2d31333718e807220c08f3becaf60510fbcd8ff20230383a480a208d86909b261ec95f2d4f7b2ee5b20fe5be8ec6f345c914c4d7b6e56b14cf2c19122408011220f994277244f6cdddc461ce887147a4a7318edd0ea0e86bd2e9ad524c33edf7c942203d29da6d4d1c286f23ed15867a59ea81753cbb6a1ff1ba751b7d32db1e606d8d52204dd3b4692add1dc3843947486ab99442fe79a4c3bfbfe3d24aa9e249b9a78c115a204dd3b4692add1dc3843947486ab99442fe79a4c3bfbfe3d24aa9e249b9a78c11622081ba6261d0077795e489737675de120cc9170adccaad805e12ef2708a2e214536a20e7ce47169e2337d3646f60cad3e1d33dc8da03eb360393ad94244958df0657d0820114b702f1c9154ac9c08da247a8e30ee6f2f3373f4112e00a0a480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a12b601080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0c08f9becaf6051098b09d990132140375b2fc7140977c9c76d45421564e354ed4227742419a3e2853f2c0deb69fc5697b60623ad5f5af8f37a0703413cb530d1de1a6a55b208edc64847872dc627576bebb8b7ebbd42164cc7b4f5f31e488f6e13996b9180112b801080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0c08f9becaf60510dddbbc9801321442eefcda06ead475cde3731b8eb138e88cd0bac338014241a8d780c3bddaaf745f6005230a0067f973d0870a73d923c31fea73fb53569fe05332c23bd8cb855df312a7f459d344d6945d9c07498832280d89199646c3f93d0112b701080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0b08f9becaf60510e6f0ed2832145973918275c01f50555d44e92c9d9b353cadad5438024241fd1e3ec74a6e8a968f1a8b64d56de941e61f3d1e2d3e293904ab561f572c83402aa5995fc5501b6eae3c405959df40951be657d74e1a147ba0b737a77809c39e0112b701080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0b08f9becaf60510cba6cc2b32147fcd58c2d53d980b247f1612fdba93e9a76193e638034241527e63d6661c7241480810925b4648a848c3b6f1cdec23e35620ded49f2e4b343057d151c864a0606fc198be28fd94ee11f40bc6b9bf9c451701cbcf8e74e55c0012b701080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0b08f9becaf60510cb87df2b3214b702f1c9154ac9c08da247a8e30ee6f2f3373f4138044241c5782bbc1850ebfb34df0674234b4850ca027dc84ffc2c53c190bfd69c745b3b4e1a896050d6b0bc7ea26c14f69b326f26053bf691cc25c1c67f3f67f65983070112b701080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0b08f9becaf60510c5dadc2b3214b8bb158b93c94ed35c1970d610d1e2b34e26652c38054241fda7db105b2512c0a493f3676b9c5b45ce9923c0a03ce8028ce6214b60c37c6d62a720d286778a925ddca2750020256f28b468715e889213d547fdc9ac731cf10112b701080210e80722480a20a37b6814ca79b6cf9783f37592a9eaf039cc8c840b3009898353e1eecd738d95122408011220086285cf29972d1f6ed0e50ffff2b186882f228e0c13d9e023f3fdb9b1876f3a2a0b08f9becaf60510cf99f82b3214f84c74dea96df0ec22e11e7c33996c73fcc2d8223806424184d70e08200423bd225a05cae405a4fadf9c57d0601f1243680ebc1127e45c602893bc476bb21936399371e46c0bae5ba19189f831ab1bfa507d69e703e6dc44011a6c0a140375b2fc7140977c9c76d45421564e354ed422771246eb5ae987410447ed13442b485dd6990efc01d4297d798e90d3fa8467dd9c2f50ffe3238c8bf722f6c774f584b5fe91364b7b430c5a24fe57aca48665cf778030266f2c452bd918904e20f0b1ffffffffffffff011a6c0a1442eefcda06ead475cde3731b8eb138e88cd0bac31246eb5ae98741043522a004012c9740703f676b95b5121edd7237fb0f182c3c45e7c7a77eaa67a20e6d0ac025d5bd96295bf95e2e875ab2a9da5c0e547b7d00ca7ede33c1b0389318904e20f0b1ffffffffffffff011a6c0a145973918275c01f50555d44e92c9d9b353cadad541246eb5ae98741043c53ea6e1964e0670dc9ac72b3224207885d4c5f08cabe1e1080c662fdec278e7e833798757cb5cf121447dcd02a15f010eb4aa87cceecb23daa4bf904112e7718904e20f0b1ffffffffffffff011a6c0a147fcd58c2d53d980b247f1612fdba93e9a76193e61246eb5ae987410479efe8c50b1f9923f48a467ecac0a64c2d6bcaa9ae67e135df84cac5aed5321f9cbb29c115f26dc84f2ef0e5fea29615848c79d690cb205cc10d688324ae8bce18904e20f0b1ffffffffffffff011a6c0a14b702f1c9154ac9c08da247a8e30ee6f2f3373f411246eb5ae9874104b4e1d56b3429f7756452426be611e595debcb858d59f47d29ec9dd6e4b547dce1539f9b7144420bc309de496b70d6dc5f13345eee85e6b7fb332cd9f364ef12f18904e20f0b1ffffffffffffff011a6c0a14b8bb158b93c94ed35c1970d610d1e2b34e26652c1246eb5ae9874104d6b06c725f5410e4ccbd65906ece180364ebea4902b21232c1fb5892a76be7eec22480397d6bf653e9abe7ac50435ee472b59364fe78b17acb2be2116f92a76f18904e20f0b1ffffffffffffff011a650a14f84c74dea96df0ec22e11e7c33996c73fcc2d8221246eb5ae98741040600efda73e1404b0c596e08c78c5ed51631fc173e5f39d21deeddd5712fcd7d6d440c53d211eb48b03063a05b2c0c0eb084053dfcf1c6540def705c8e02845618904e20e0d403")
		param := new(scom.SyncGenesisHeaderParam)
		param.ChainID = heimdalChainID
		param.GenesisHeader = heimdallGenesisHeaderBytes
		sink := common.NewZeroCopySink(nil)
		param.Serialization(sink)

		tx := &types.Transaction{
			SignedAddr: []common.Address{acct.Address},
		}

		native, err = NewNative(sink.Bytes(), tx, nil)
		assert.NilError(t, err)
		err = handler.SyncGenesisHeader(native)
		if err != nil {
			t.Fatal("SyncGenesisHeader fail", err)
		}
	}
	{
		// block 1589
		moreHeaderBytes, _ := hex.DecodeString("0af6020a02080a120c6865696d64616c6c2d31333718b50c220c0892d8caf60510b9d0b2f301280130523a480a20975eaaa5b8d23a88b107b846fbd68348e78efaa57c2d2e291fbb758503c34fef122408011220e7ef4ed3a3c0daa13a638946c58c2700251e2289fe6f3d6f7dfb90165c486eb74220f4cee00ec3156ccbd5a54d75769dbdf88970526dbceed7f559d3af19f44d4fd34a200522d72338efcee07dfaa2eef01ce077f73a4d19e5fbad3a10e3d945ec0e8a8a52204dd3b4692add1dc3843947486ab99442fe79a4c3bfbfe3d24aa9e249b9a78c115a20589e0a44c5a2ec502a77e9284c818cbb59459cd66bd55f7589e8ff8a3fc6b89f622081ba6261d0077795e489737675de120cc9170adccaad805e12ef2708a2e214536a206caa66ab079e39c83bbdb7867d15cf0fd85ce7314047fff1da64ddcb4910618a7220ce2068ccef2788f875108e0c2f21b65f72648c46f1d2db6e8655b4c2492482e2820114b8bb158b93c94ed35c1970d610d1e2b34e26652c12e80c0a480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b12db01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf60510efa1a54a32140375b2fc7140977c9c76d45421564e354ed422774241a36e96833f40719c91e0ba3f5b61ea4d0060541bcfd1202b2bafad5a60aaa10c5587cede9ed8d3097c0b0d0684071195e5f729c63a3ca4ad1be00bbe28c1894e004a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd100112dd01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf60510cdfbf049321442eefcda06ead475cde3731b8eb138e88cd0bac33801424155cbf0f735631cfcdd6e8b6e82a3c995adb5470c2f1d03a44d3bc720f8e6f82c46578115c79def2ed60db8a2518692cc6e37be9adbafe83f02c6ace3ecfe3a2d014a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd100112dd01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf60510c3a2a70a32145973918275c01f50555d44e92c9d9b353cadad5438024241181fa7324c2325219c92f81c021fa65680e45aa93f03fd7f857aca75213c48e97b45f02ee54da091e8a55f800c09dc178e53a30d13d7534ee0286341902b4b42004a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd100112dd01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf60510dacc9a0b32147fcd58c2d53d980b247f1612fdba93e9a76193e638034241426e3912627e1c212ca5c865f1ea7f34bda32f5c5d2b4804568276a61819e6e95d781c3abecc25a991cf95abb8cb7b812aa5e1a3ac252ed9a7874e6eca23d90b004a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd100112dd01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf6051081b2f10a3214b702f1c9154ac9c08da247a8e30ee6f2f3373f4138044241de5faed7e16a9c093eb9c8784c36314ae667699c8c6ec0705c3fabdd0f21f37a68bcc33906bc9fca8e051f10088be58de7e54668d75f9bc2c0432a503ff13d1a014a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd100112dd01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf605108797c60c3214b8bb158b93c94ed35c1970d610d1e2b34e26652c38054241ec23eaecbc57d6c5adec084655cc72a6a7d25a4b631c627546c548feca75883f5233b07dd3dca2725967f3b828b4ff06f58838f1f2f554e7657137789a636940014a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd100112dd01080210b50c22480a20aeb4c6383c6de9468d4d50e1b0a2f9e8080bf97bc4d7412bb154f05c34e645b21224080112205a1ba9cd51a01d6cf3286c96ceb4db0e3242077e64be63cee18d4e271390c85b2a0b0898d8caf60510e4bfd30a3214f84c74dea96df0ec22e11e7c33996c73fcc2d82238064241b99521391959e2875032d2590802ccb673a59c6647fa0552d2903ec322c5a43068b7b8f70f4be943ed9b760b590aed1e817209135b6086b448054a736140a88b014a240a20822ae0281a2ef8c6950970c94f9020d3df853bc800d30c509ef6dd4d94faf1bd10011a610a140375b2fc7140977c9c76d45421564e354ed422771246eb5ae987410447ed13442b485dd6990efc01d4297d798e90d3fa8467dd9c2f50ffe3238c8bf722f6c774f584b5fe91364b7b430c5a24fe57aca48665cf778030266f2c452bd918904e1a610a1442eefcda06ead475cde3731b8eb138e88cd0bac31246eb5ae98741043522a004012c9740703f676b95b5121edd7237fb0f182c3c45e7c7a77eaa67a20e6d0ac025d5bd96295bf95e2e875ab2a9da5c0e547b7d00ca7ede33c1b0389318904e1a610a145973918275c01f50555d44e92c9d9b353cadad541246eb5ae98741043c53ea6e1964e0670dc9ac72b3224207885d4c5f08cabe1e1080c662fdec278e7e833798757cb5cf121447dcd02a15f010eb4aa87cceecb23daa4bf904112e7718904e1a610a147fcd58c2d53d980b247f1612fdba93e9a76193e61246eb5ae987410479efe8c50b1f9923f48a467ecac0a64c2d6bcaa9ae67e135df84cac5aed5321f9cbb29c115f26dc84f2ef0e5fea29615848c79d690cb205cc10d688324ae8bce18904e1a610a14b702f1c9154ac9c08da247a8e30ee6f2f3373f411246eb5ae9874104b4e1d56b3429f7756452426be611e595debcb858d59f47d29ec9dd6e4b547dce1539f9b7144420bc309de496b70d6dc5f13345eee85e6b7fb332cd9f364ef12f18904e1a610a14b8bb158b93c94ed35c1970d610d1e2b34e26652c1246eb5ae9874104d6b06c725f5410e4ccbd65906ece180364ebea4902b21232c1fb5892a76be7eec22480397d6bf653e9abe7ac50435ee472b59364fe78b17acb2be2116f92a76f18904e1a610a14f84c74dea96df0ec22e11e7c33996c73fcc2d8221246eb5ae98741040600efda73e1404b0c596e08c78c5ed51631fc173e5f39d21deeddd5712fcd7d6d440c53d211eb48b03063a05b2c0c0eb084053dfcf1c6540def705c8e02845618904e")
		param := new(scom.SyncBlockHeaderParam)
		param.ChainID = heimdalChainID
		param.Address = acct.Address
		param.Headers = append(param.Headers, moreHeaderBytes)
		sink := common.NewZeroCopySink(nil)
		param.Serialization(sink)
		tx := &types.Transaction{
			SignedAddr: []common.Address{acct.Address},
		}

		native, err = NewNative(sink.Bytes(), tx, native.GetCacheDB())
		if err != nil {
			t.Fatal("NewNative fail", err)
		}
		err = handler.SyncBlockHeader(native)
		if err != nil {
			t.Fatal("SyncBlockHeader fail", err)
		}
	}

	return

	borHandler := NewBorHandler()
	borGenesisHeaderBytes := []byte("")
	{
		param := new(scom.SyncGenesisHeaderParam)
		param.ChainID = borChainID
		param.GenesisHeader = borGenesisHeaderBytes
		sink := common.NewZeroCopySink(nil)
		param.Serialization(sink)

		tx := &types.Transaction{
			SignedAddr: []common.Address{acct.Address},
		}

		native, err = NewNative(sink.Bytes(), tx, native.GetCacheDB())
		assert.NilError(t, err)
		err = borHandler.SyncGenesisHeader(native)
		if err != nil {
			t.Fatal("SyncGenesisHeader fail", err)
		}
	}

	{
		var n1Bytes []byte
		param := new(scom.SyncBlockHeaderParam)
		param.ChainID = borChainID
		param.Address = acct.Address
		param.Headers = append(param.Headers, n1Bytes)
		sink := common.NewZeroCopySink(nil)
		param.Serialization(sink)
		tx := &types.Transaction{
			SignedAddr: []common.Address{acct.Address},
		}

		native, err = NewNative(sink.Bytes(), tx, native.GetCacheDB())
		if err != nil {
			t.Fatal("NewNative fail", err)
		}
		err = borHandler.SyncBlockHeader(native)
		if err != nil {
			t.Fatal("SyncBlockHeader fail", err)
		}
	}
}
