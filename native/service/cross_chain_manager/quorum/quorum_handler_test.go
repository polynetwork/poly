/*
 * Copyright (C) 2020 The poly network Authors
 * This file is part of The poly network library.
 *
 * The  poly network  is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The  poly network  is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with The poly network .  If not, see <http://www.gnu.org/licenses/>.
 */
package quorum

import (
	"encoding/hex"
	"errors"
	common2 "github.com/ethereum/go-ethereum/common"
	"github.com/ontio/ontology-crypto/keypair"
	"github.com/polynetwork/poly/account"
	"github.com/polynetwork/poly/common"
	"github.com/polynetwork/poly/consensus/vbft/config"
	"github.com/polynetwork/poly/core/states"
	"github.com/polynetwork/poly/core/store/leveldbstore"
	"github.com/polynetwork/poly/core/store/overlaydb"
	"github.com/polynetwork/poly/core/types"
	"github.com/polynetwork/poly/native"
	common4 "github.com/polynetwork/poly/native/service/cross_chain_manager/common"
	"github.com/polynetwork/poly/native/service/governance/node_manager"
	"github.com/polynetwork/poly/native/service/governance/side_chain_manager"
	common3 "github.com/polynetwork/poly/native/service/header_sync/common"
	"github.com/polynetwork/poly/native/service/header_sync/quorum"
	"github.com/polynetwork/poly/native/service/utils"
	"github.com/polynetwork/poly/native/storage"
	"testing"
	"time"
)

var (
	acct = account.NewAccount("")

	getNativeFunc = func(args []byte, db *storage.CacheDB) *native.NativeService {
		signAddr, _ := types.AddressFromBookkeepers([]keypair.PublicKey{acct.PublicKey})
		if db == nil {
			store, _ := leveldbstore.NewMemLevelDBStore()
			db = storage.NewCacheDB(overlaydb.NewOverlayDB(store))
			sink := common.NewZeroCopySink(nil)
			view := &node_manager.GovernanceView{
				TxHash: common.UINT256_EMPTY,
				Height: 0,
				View:   0,
			}
			view.Serialization(sink)
			db.Put(utils.ConcatKey(utils.NodeManagerContractAddress, []byte(node_manager.GOVERNANCE_VIEW)), states.GenRawStorageItem(sink.Bytes()))

			peerPoolMap := &node_manager.PeerPoolMap{
				PeerPoolMap: map[string]*node_manager.PeerPoolItem{
					vconfig.PubkeyID(acct.PublicKey): {
						Address:    acct.Address,
						Status:     node_manager.ConsensusStatus,
						PeerPubkey: vconfig.PubkeyID(acct.PublicKey),
						Index:      0,
					},
				},
			}
			sink.Reset()
			peerPoolMap.Serialization(sink)
			db.Put(utils.ConcatKey(utils.NodeManagerContractAddress,
				[]byte(node_manager.PEER_POOL), utils.GetUint32Bytes(0)), states.GenRawStorageItem(sink.Bytes()))

			sc := &side_chain_manager.SideChain{
				BlocksToWait: 1,
				Address:      signAddr,
				CCMCAddress:  common2.Hex2Bytes("901f8abd2afb170f24f1674d6aacdf39815f6cbe"),
			}
			sink.Reset()
			_ = sc.Serialization(sink)
			db.Put(utils.ConcatKey(utils.SideChainManagerContractAddress, []byte(side_chain_manager.SIDE_CHAIN), utils.GetUint64Bytes(106)), states.GenRawStorageItem(sink.Bytes()))
		}

		ns, _ := native.NewNativeService(db, &types.Transaction{SignedAddr: []common.Address{signAddr}}, uint32(time.Now().Unix()), 0, common.Uint256{0}, 0, args, false)
		return ns
	}

	gh    = "7b22706172656e7448617368223a22307863623537333530363563316633633334626236613166356439343838643338343261653530343364613366643761376164316139376333343032643866646339222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307833356161656131393862303033386232633537623534663765396133353036646361643538613965633236363137313963356437313539363261393966633561222c227472616e73616374696f6e73526f6f74223a22307830653164356666366335636234633030303833326232356538333866386162376234396534366338376135663436633261363965373731373037626630393461222c227265636569707473526f6f74223a22307838373537303230316162353238323865396537363863343233396538636262303334666633373736613933666333363361626231393831346265376531343531222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307831222c226e756d626572223a223078353462222c226761734c696d6974223a2230786130653665633565222c2267617355736564223a22307830222c2274696d657374616d70223a2230783566666265373632222c22657874726144617461223ac226d697848617368223a22307836333734363936333631366332303632373937613631366537343639366536353230363636313735366337343230373436663663363537323631366536333635222c226e6f6e6365223a22307830303030303030303030303030303030222c2268617368223a22307831343036633463313638323365396634353733386663383533613638396132623163393034346462343737613336616162343963383735383766333931393263227d"
	h1    = "7b22706172656e7448617368223a22307835346433626437333434323133613265343136646663336464323432323839303633343532353463633339636634656166316362386163323565346334623031222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c227374617465526f6f74223a22307834326539653932366265306133383766373566373765326535613161353862346538646635376261366465393636393562633737653830323736653933306564222c227472616e73616374696f6e73526f6f74223a22307835373063366136363061613436313161343232323265316466316239383164656438353563306230316139363935343136666361376665343534323834316534222c227265636569707473526f6f74223a22307862363434303864613662386665333961623736346166383865636531653863636131633335666439383864623537383036653939313338633632393336356130222c226c6f6773426c6f6f6d223a2230783030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c22646966666963756c7479223a22307831222c226e756d626572223a22307835346530222c226761734c696d6974223a2230783239623932373030222c2267617355736564223a22307830222c2274696d657374616d70223a2230783566666437393235222c22657874726144617461223ac226d697848617368223a22307836333734363936333631366332303632373937613631366537343639366536353230363636313735366337343230373436663663363537323631366536333635222c226e6f6e6365223a22307830303030303030303030303030303030222c2268617368223a22307865353265636535613365636539306131626465396564346139323164623232303237303735653465376235626232386132333334623366373937613936333134227d"
	proof = "7b2261646472657373223a22307839303166386162643261666231373066323466313637346436616163646633393831356636636265222c2262616c616e6365223a22307830222c22636f646548617368223a22307833393731343662313134306635383963313461373065333034666535636264646532393863363934396465333335333035333965366639633562333337663664222c226e6f6e6365223a22307831222c2273746f7261676548617368223a22307835653366626133396164366561343239383065343835656134373665623162313438663665353235633532303963656232366465376431656339346134363462222c226163636f756e7450726f6f66223a5bc22307866383531383038303830383038306130383931363961316334616563393631343662646536636634303535393737656337383865633065383034373331383239643335306331363036303536396566343830383038303830383038306130396435633265633164386463313332623866396565636163383837353735623135333130343434623961316437393931613131393433343866376134363735363830383038303830222c22307866383531383038303830383061303933643638376533623339333062366165666432303666616161356162656338306139623166343766633063373234663135303533396566336436323239623438303830383038306130353562373235396361666466636364623561343731653931613230386539623162333565333137616634623332333235386231623763363430646264306131373830383038303830383038303830222c2230786638363839663365326636376534383934653039633836656336353830326561373862643135643031343735663066663932343065303766366265313663356130343436623834366638343430313830613035653366626133396164366561343239383065343835656134373665623162313438663665353235633532303963656232366465376431656339346134363462613033393731343662313134306635383963313461373065333034666535636264646532393863363934396465333335333035333965366639633562333337663664225d2c2273746f7261676550726f6f66223a5b7b226b6579223a22307837346135666263623431396162376462616362623263393261346531363337333066306461356337326239313164656563663466303561366233323764306134222c2276616c7565223a22307831636431663036313466363733366332653830666532666336386139653036613439386463613762373037306166616665373565656338633939383437336463222c2270726f6f66223a5bc22307866383531383038303830383038303830383061303561303433366231646134363262363435323931303061323764376637333035613835303166386136643663633436303438363136643739623865353635363538303830383038303830383038306130653163656163333238643739643939633034646139376535623461643538363235616265356235303336326261653263336566616264336237363835336663323830222c223078663834336130323064356438373965663335353239623034306565613838656230376262643137333766356465616332383738343663326365386130313636333339656265306131613031636431663036313466363733366332653830666532666336386139653036613439386463613762373037306166616665373565656338633939383437336463225d7d5d7d"
	mtp   = "20000000000000000000000000000000000000000000000000000000000000000920452c8804755348eef67110ca6d93947f403aa38fcaf105f38895d43e182e8d9914000000000000000000000000000000000000010302000000000000001433082b802c4099040420533a9234bd80d71726ba06756e6c6f636b4a141ac77d322e3347b8de181304b7c118a7e89c6bc1142cd9d589d46122e4eddc495b49feda0b526c1af7000064a7b3b6e00d000000000000000000000000000000000000000000000000"
)

func prepare() (ns *native.NativeService, err error) {
	raw, err := hex.DecodeString(gh)
	if err != nil {
		return
	}
	p := common3.SyncGenesisHeaderParam{
		ChainID:       106,
		GenesisHeader: raw,
	}
	sink := common.NewZeroCopySink(nil)
	p.Serialization(sink)

	ns = getNativeFunc(sink.Bytes(), nil)
	h := quorum.NewQuorumHandler()
	err = h.SyncGenesisHeader(ns)
	return
}

func TestQuorumHandler_MakeDepositProposal(t *testing.T) {
	ns, err := prepare()
	if err != nil {
		t.Fatal(err)
	}

	rawProof, _ := hex.DecodeString(proof)
	rawH, _ := hex.DecodeString(h1)
	rawP, _ := hex.DecodeString(mtp)

	p := &common4.EntranceParam{
		SourceChainID:         106,
		HeaderOrCrossChainMsg: rawH,
		Extra:                 rawP,
		Height:                0,
		Proof:                 rawProof,
		RelayerAddress:        acct.Address[:],
	}
	sink := common.NewZeroCopySink(nil)
	p.Serialization(sink)

	ns = getNativeFunc(sink.Bytes(), ns.GetCacheDB())

	h := NewQuorumHandler()
	res, err := h.MakeDepositProposal(ns)
	if err != nil {
		t.Fatal(err)
	}
	if len(res.Args) == 0 {
		t.Fatal(errors.New("failed"))
	}
}
